<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
var data = File.ReadAllLines(Host.TemplateFile.Replace(".tt", ".txt"))
    .Where(l => l.Trim().Length > 0)
    .Where(l => !l.StartsWith(";"))
    .ToArray();

var re = new Regex(@"^(?<offset>[0-9a-f]{8}):\s+(?<number>([0-9a-f]{2}|'[^']+'|\.\.?))(\s+(?<number>([0-9a-f]{2}|'[^']+'|\.\.?)))*\s*$", RegexOptions.IgnoreCase);
Func<string, string> formatted = delegate(string s)
{
    s = s.Replace("\n", "\\n").Replace("\r", "\\r").Replace("\t", "\\t").Replace("\"", "\\\"");
    return "\"" + s + "\"";
};
Func<string, string[]> formatNumber = delegate(string s)
{
    if (s.StartsWith("."))
        return new[] { "-1" };

    if (s.StartsWith("'"))
    {
        s = s.Substring(1, s.Length - 2);
        var result = new List<string>();
        foreach (char c in s)
            result.Add("0x" + ((int)c).ToString("x2"));
        return result.ToArray();
    }

    return new[] { "0x" + s };
};
#>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace FileSignatures
{
    /// <summary>
    /// This part of the SimpleSignatures class is generated by SimpleSignatures.tt
    /// </summary>
    [ContentIdentifier]
    internal partial class SimpleSignatures : IContentIdentifier
    {
        public IEnumerable<ContentFormat> Identify(IByteContainer container)
        {
            bool isMatch;

<#
    var index = 0;
    while (index < data.Length)
    {
        if (data[index].StartsWith("."))
        {
            string mimeType = "string.Empty";
            string line = data[index];
            int mimeIndex = line.IndexOf('(');
            if (mimeIndex > 0)
            {
                mimeType = line.Substring(mimeIndex + 1);
                mimeType = mimeType.Substring(0, mimeType.Length - 1);
                line = line.Substring(0, mimeIndex).Trim();

                if (mimeType == "*")
                    mimeType = line.Substring(1);
                mimeType = "\"" + mimeType + "\"";
            }
            string[] parts = line.Substring(1).Trim().Split('/');
            if (parts.Length < 2 || parts.Length > 3)
            {
#>
#error invalid number of parts: <#= data[index] #>
<#
            }
#>
            // <#= data[index].Substring(1) #>
<#
            index++;
            bool first = true;
            int length = 0;
            while (index < data.Length && !data[index].StartsWith("."))
            {
                var ma = re.Match(data[index]);
                if (ma.Success)
                {
                    var numbers = ma.Groups["number"].Captures.OfType<Capture>().SelectMany(c => formatNumber(c.Value)).ToArray();
#>
            isMatch = <#= !first ? "isMatch && " : "" #>Match(container, 0x<#= ma.Groups["offset"].Value #>, new short[] { <#= string.Join(", ", numbers) #> });
<#
                    length = length + numbers.Where(n => n != "-1").Count();
                }
                else
                {
#>
#error invalid: <#= data[index] #>
<#
                }
                index++;
                first = false;
            }
            List<string> partsOutput = new List<string>();
            foreach (var part in parts)
                partsOutput.Add(formatted(part));
            if (parts.Length == 2)
                partsOutput.Add("string.Empty");
            partsOutput.Add(length.ToString());
            partsOutput.Add(mimeType);
#>
            if (isMatch)
                yield return new ContentFormat(<#= string.Join(", ", partsOutput) #>);

<#
        }
        else
        {
#>
#error unknown: <#= data[index] #>
<#
            index++;
        }
    }
#>
            yield break;
        }
    }
}